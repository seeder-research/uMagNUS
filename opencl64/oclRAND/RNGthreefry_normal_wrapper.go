package oclRAND

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for threefry_normal kernel invocation
type threefry_normal_args_t struct {
	arg_state_key     unsafe.Pointer
	arg_state_counter unsafe.Pointer
	arg_state_result  unsafe.Pointer
	arg_state_tracker unsafe.Pointer
	arg_output        unsafe.Pointer
	arg_data_size     int
	argptr            [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for threefry_normal kernel invocation
var threefry_normal_args threefry_normal_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	threefry_normal_args.argptr[0] = unsafe.Pointer(&threefry_normal_args.arg_state_key)
	threefry_normal_args.argptr[1] = unsafe.Pointer(&threefry_normal_args.arg_state_counter)
	threefry_normal_args.argptr[2] = unsafe.Pointer(&threefry_normal_args.arg_state_result)
	threefry_normal_args.argptr[3] = unsafe.Pointer(&threefry_normal_args.arg_state_tracker)
	threefry_normal_args.argptr[4] = unsafe.Pointer(&threefry_normal_args.arg_output)
	threefry_normal_args.argptr[5] = unsafe.Pointer(&threefry_normal_args.arg_data_size)
}

// Wrapper for threefry_normal OpenCL kernel, asynchronous.
func k_threefry_normal_async(state_key unsafe.Pointer, state_counter unsafe.Pointer, state_result unsafe.Pointer, state_tracker unsafe.Pointer, output unsafe.Pointer, data_size int, cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous { // debug
		ClCmdQueue.Finish()
		timer.Start("threefry_normal")
	}

	threefry_normal_args.Lock()
	defer threefry_normal_args.Unlock()

	threefry_normal_args.arg_state_key = state_key
	threefry_normal_args.arg_state_counter = state_counter
	threefry_normal_args.arg_state_result = state_result
	threefry_normal_args.arg_state_tracker = state_tracker
	threefry_normal_args.arg_output = output
	threefry_normal_args.arg_data_size = data_size

	SetKernelArgWrapper("threefry_normal", 0, state_key)
	SetKernelArgWrapper("threefry_normal", 1, state_counter)
	SetKernelArgWrapper("threefry_normal", 2, state_result)
	SetKernelArgWrapper("threefry_normal", 3, state_tracker)
	SetKernelArgWrapper("threefry_normal", 4, output)
	SetKernelArgWrapper("threefry_normal", 5, data_size)

	//	args := threefry_normal_args.argptr[:]
	event := LaunchKernel("threefry_normal", cfg.Grid, cfg.Block, events)

	if Synchronous { // debug
		ClCmdQueue.Finish()
		timer.Stop("threefry_normal")
	}

	return event
}
