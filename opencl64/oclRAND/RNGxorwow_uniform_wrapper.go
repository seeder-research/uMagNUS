package oclRAND

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for xorwow_uniform kernel invocation
type xorwow_uniform_args_t struct {
	arg_state_buf unsafe.Pointer
	arg_d_data    unsafe.Pointer
	arg_count     int
	argptr        [3]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for xorwow_uniform kernel invocation
var xorwow_uniform_args xorwow_uniform_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	xorwow_uniform_args.argptr[0] = unsafe.Pointer(&xorwow_uniform_args.arg_state_buf)
	xorwow_uniform_args.argptr[1] = unsafe.Pointer(&xorwow_uniform_args.arg_d_data)
	xorwow_uniform_args.argptr[2] = unsafe.Pointer(&xorwow_uniform_args.arg_count)
}

// Wrapper for xorwow_uniform OpenCL kernel, asynchronous.
func k_xorwow_uniform_async(state_buf unsafe.Pointer, d_data unsafe.Pointer, count int, cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous { // debug
		ClCmdQueue.Finish()
		timer.Start("xorwow_uniform")
	}

	xorwow_uniform_args.Lock()
	defer xorwow_uniform_args.Unlock()

	xorwow_uniform_args.arg_state_buf = state_buf
	xorwow_uniform_args.arg_d_data = d_data
	xorwow_uniform_args.arg_count = count

	SetKernelArgWrapper("xorwow_uniform", 0, state_buf)
	SetKernelArgWrapper("xorwow_uniform", 1, d_data)
	SetKernelArgWrapper("xorwow_uniform", 2, count)

	//	args := xorwow_uniform_args.argptr[:]
	event := LaunchKernel("xorwow_uniform", cfg.Grid, cfg.Block, events)

	if Synchronous { // debug
		ClCmdQueue.Finish()
		timer.Stop("xorwow_uniform")
	}

	return event
}
