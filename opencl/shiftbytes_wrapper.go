package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for shiftbytes kernel invocation
type shiftbytes_args_t struct {
	arg_dst    unsafe.Pointer
	arg_src    unsafe.Pointer
	arg_Nx     int
	arg_Ny     int
	arg_Nz     int
	arg_shx    int
	arg_clampV uint8
	argptr     [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for shiftbytes kernel invocation
var shiftbytes_args shiftbytes_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	shiftbytes_args.argptr[0] = unsafe.Pointer(&shiftbytes_args.arg_dst)
	shiftbytes_args.argptr[1] = unsafe.Pointer(&shiftbytes_args.arg_src)
	shiftbytes_args.argptr[2] = unsafe.Pointer(&shiftbytes_args.arg_Nx)
	shiftbytes_args.argptr[3] = unsafe.Pointer(&shiftbytes_args.arg_Ny)
	shiftbytes_args.argptr[4] = unsafe.Pointer(&shiftbytes_args.arg_Nz)
	shiftbytes_args.argptr[5] = unsafe.Pointer(&shiftbytes_args.arg_shx)
	shiftbytes_args.argptr[6] = unsafe.Pointer(&shiftbytes_args.arg_clampV)
}

// Wrapper for shiftbytes OpenCL kernel, asynchronous.
func k_shiftbytes_async(dst unsafe.Pointer, src unsafe.Pointer, Nx int, Ny int, Nz int, shx int, clampV uint8, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("shiftbytes")
	}

	shiftbytes_args.Lock()
	defer shiftbytes_args.Unlock()

	shiftbytes_args.arg_dst = dst
	shiftbytes_args.arg_src = src
	shiftbytes_args.arg_Nx = Nx
	shiftbytes_args.arg_Ny = Ny
	shiftbytes_args.arg_Nz = Nz
	shiftbytes_args.arg_shx = shx
	shiftbytes_args.arg_clampV = clampV

	SetKernelArgWrapper("shiftbytes", 0, dst)
	SetKernelArgWrapper("shiftbytes", 1, src)
	SetKernelArgWrapper("shiftbytes", 2, Nx)
	SetKernelArgWrapper("shiftbytes", 3, Ny)
	SetKernelArgWrapper("shiftbytes", 4, Nz)
	SetKernelArgWrapper("shiftbytes", 5, shx)
	SetKernelArgWrapper("shiftbytes", 6, clampV)

	//	args := shiftbytes_args.argptr[:]
	event := LaunchKernel("shiftbytes", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("shiftbytes")
	}

	return event
}
