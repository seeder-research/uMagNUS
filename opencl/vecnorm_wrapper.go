package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for vecnorm kernel invocation
type vecnorm_args_t struct {
	arg_dst unsafe.Pointer
	arg_ax  unsafe.Pointer
	arg_ay  unsafe.Pointer
	arg_az  unsafe.Pointer
	arg_N   int
	argptr  [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for vecnorm kernel invocation
var vecnorm_args vecnorm_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	vecnorm_args.argptr[0] = unsafe.Pointer(&vecnorm_args.arg_dst)
	vecnorm_args.argptr[1] = unsafe.Pointer(&vecnorm_args.arg_ax)
	vecnorm_args.argptr[2] = unsafe.Pointer(&vecnorm_args.arg_ay)
	vecnorm_args.argptr[3] = unsafe.Pointer(&vecnorm_args.arg_az)
	vecnorm_args.argptr[4] = unsafe.Pointer(&vecnorm_args.arg_N)
}

// Wrapper for vecnorm OpenCL kernel, asynchronous.
func k_vecnorm_async(dst unsafe.Pointer, ax unsafe.Pointer, ay unsafe.Pointer, az unsafe.Pointer, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("vecnorm")
	}

	vecnorm_args.Lock()
	defer vecnorm_args.Unlock()

	vecnorm_args.arg_dst = dst
	vecnorm_args.arg_ax = ax
	vecnorm_args.arg_ay = ay
	vecnorm_args.arg_az = az
	vecnorm_args.arg_N = N

	SetKernelArgWrapper("vecnorm", 0, dst)
	SetKernelArgWrapper("vecnorm", 1, ax)
	SetKernelArgWrapper("vecnorm", 2, ay)
	SetKernelArgWrapper("vecnorm", 3, az)
	SetKernelArgWrapper("vecnorm", 4, N)

	//	args := vecnorm_args.argptr[:]
	event := LaunchKernel("vecnorm", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("vecnorm")
	}

	return event
}
