package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for lltorque2 kernel invocation
type lltorque2_args_t struct {
	arg_tx        unsafe.Pointer
	arg_ty        unsafe.Pointer
	arg_tz        unsafe.Pointer
	arg_mx        unsafe.Pointer
	arg_my        unsafe.Pointer
	arg_mz        unsafe.Pointer
	arg_hx        unsafe.Pointer
	arg_hy        unsafe.Pointer
	arg_hz        unsafe.Pointer
	arg_alpha_    unsafe.Pointer
	arg_alpha_mul float32
	arg_N         int
	argptr        [12]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for lltorque2 kernel invocation
var lltorque2_args lltorque2_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	lltorque2_args.argptr[0] = unsafe.Pointer(&lltorque2_args.arg_tx)
	lltorque2_args.argptr[1] = unsafe.Pointer(&lltorque2_args.arg_ty)
	lltorque2_args.argptr[2] = unsafe.Pointer(&lltorque2_args.arg_tz)
	lltorque2_args.argptr[3] = unsafe.Pointer(&lltorque2_args.arg_mx)
	lltorque2_args.argptr[4] = unsafe.Pointer(&lltorque2_args.arg_my)
	lltorque2_args.argptr[5] = unsafe.Pointer(&lltorque2_args.arg_mz)
	lltorque2_args.argptr[6] = unsafe.Pointer(&lltorque2_args.arg_hx)
	lltorque2_args.argptr[7] = unsafe.Pointer(&lltorque2_args.arg_hy)
	lltorque2_args.argptr[8] = unsafe.Pointer(&lltorque2_args.arg_hz)
	lltorque2_args.argptr[9] = unsafe.Pointer(&lltorque2_args.arg_alpha_)
	lltorque2_args.argptr[10] = unsafe.Pointer(&lltorque2_args.arg_alpha_mul)
	lltorque2_args.argptr[11] = unsafe.Pointer(&lltorque2_args.arg_N)
}

// Wrapper for lltorque2 OpenCL kernel, asynchronous.
func k_lltorque2_async(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, hx unsafe.Pointer, hy unsafe.Pointer, hz unsafe.Pointer, alpha_ unsafe.Pointer, alpha_mul float32, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("lltorque2")
	}

	lltorque2_args.Lock()
	defer lltorque2_args.Unlock()

	lltorque2_args.arg_tx = tx
	lltorque2_args.arg_ty = ty
	lltorque2_args.arg_tz = tz
	lltorque2_args.arg_mx = mx
	lltorque2_args.arg_my = my
	lltorque2_args.arg_mz = mz
	lltorque2_args.arg_hx = hx
	lltorque2_args.arg_hy = hy
	lltorque2_args.arg_hz = hz
	lltorque2_args.arg_alpha_ = alpha_
	lltorque2_args.arg_alpha_mul = alpha_mul
	lltorque2_args.arg_N = N

	SetKernelArgWrapper("lltorque2", 0, tx)
	SetKernelArgWrapper("lltorque2", 1, ty)
	SetKernelArgWrapper("lltorque2", 2, tz)
	SetKernelArgWrapper("lltorque2", 3, mx)
	SetKernelArgWrapper("lltorque2", 4, my)
	SetKernelArgWrapper("lltorque2", 5, mz)
	SetKernelArgWrapper("lltorque2", 6, hx)
	SetKernelArgWrapper("lltorque2", 7, hy)
	SetKernelArgWrapper("lltorque2", 8, hz)
	SetKernelArgWrapper("lltorque2", 9, alpha_)
	SetKernelArgWrapper("lltorque2", 10, alpha_mul)
	SetKernelArgWrapper("lltorque2", 11, N)

	//	args := lltorque2_args.argptr[:]
	event := LaunchKernel("lltorque2", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("lltorque2")
	}

	return event
}
