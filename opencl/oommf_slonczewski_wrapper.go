package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for addoommfslonczewskitorque kernel invocation
type addoommfslonczewskitorque_args_t struct {
	arg_tx               unsafe.Pointer
	arg_ty               unsafe.Pointer
	arg_tz               unsafe.Pointer
	arg_mx               unsafe.Pointer
	arg_my               unsafe.Pointer
	arg_mz               unsafe.Pointer
	arg_Ms_              unsafe.Pointer
	arg_Ms_mul           float32
	arg_jz_              unsafe.Pointer
	arg_jz_mul           float32
	arg_px_              unsafe.Pointer
	arg_px_mul           float32
	arg_py_              unsafe.Pointer
	arg_py_mul           float32
	arg_pz_              unsafe.Pointer
	arg_pz_mul           float32
	arg_alpha_           unsafe.Pointer
	arg_alpha_mul        float32
	arg_pfix_            unsafe.Pointer
	arg_pfix_mul         float32
	arg_pfree_           unsafe.Pointer
	arg_pfree_mul        float32
	arg_lambdafix_       unsafe.Pointer
	arg_lambdafix_mul    float32
	arg_lambdafree_      unsafe.Pointer
	arg_lambdafree_mul   float32
	arg_epsilonPrime_    unsafe.Pointer
	arg_epsilonPrime_mul float32
	arg_flt_             unsafe.Pointer
	arg_flt_mul          float32
	arg_N                int
	argptr               [31]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for addoommfslonczewskitorque kernel invocation
var addoommfslonczewskitorque_args addoommfslonczewskitorque_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	addoommfslonczewskitorque_args.argptr[0] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_tx)
	addoommfslonczewskitorque_args.argptr[1] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_ty)
	addoommfslonczewskitorque_args.argptr[2] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_tz)
	addoommfslonczewskitorque_args.argptr[3] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_mx)
	addoommfslonczewskitorque_args.argptr[4] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_my)
	addoommfslonczewskitorque_args.argptr[5] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_mz)
	addoommfslonczewskitorque_args.argptr[6] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_Ms_)
	addoommfslonczewskitorque_args.argptr[7] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_Ms_mul)
	addoommfslonczewskitorque_args.argptr[8] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_jz_)
	addoommfslonczewskitorque_args.argptr[9] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_jz_mul)
	addoommfslonczewskitorque_args.argptr[10] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_px_)
	addoommfslonczewskitorque_args.argptr[11] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_px_mul)
	addoommfslonczewskitorque_args.argptr[12] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_py_)
	addoommfslonczewskitorque_args.argptr[13] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_py_mul)
	addoommfslonczewskitorque_args.argptr[14] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_pz_)
	addoommfslonczewskitorque_args.argptr[15] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_pz_mul)
	addoommfslonczewskitorque_args.argptr[16] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_alpha_)
	addoommfslonczewskitorque_args.argptr[17] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_alpha_mul)
	addoommfslonczewskitorque_args.argptr[18] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_pfix_)
	addoommfslonczewskitorque_args.argptr[19] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_pfix_mul)
	addoommfslonczewskitorque_args.argptr[20] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_pfree_)
	addoommfslonczewskitorque_args.argptr[21] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_pfree_mul)
	addoommfslonczewskitorque_args.argptr[22] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_lambdafix_)
	addoommfslonczewskitorque_args.argptr[23] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_lambdafix_mul)
	addoommfslonczewskitorque_args.argptr[24] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_lambdafree_)
	addoommfslonczewskitorque_args.argptr[25] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_lambdafree_mul)
	addoommfslonczewskitorque_args.argptr[26] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_epsilonPrime_)
	addoommfslonczewskitorque_args.argptr[27] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_epsilonPrime_mul)
	addoommfslonczewskitorque_args.argptr[28] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_flt_)
	addoommfslonczewskitorque_args.argptr[29] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_flt_mul)
	addoommfslonczewskitorque_args.argptr[30] = unsafe.Pointer(&addoommfslonczewskitorque_args.arg_N)
}

// Wrapper for addoommfslonczewskitorque OpenCL kernel, asynchronous.
func k_addoommfslonczewskitorque_async(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Ms_ unsafe.Pointer, Ms_mul float32, jz_ unsafe.Pointer, jz_mul float32, px_ unsafe.Pointer, px_mul float32, py_ unsafe.Pointer, py_mul float32, pz_ unsafe.Pointer, pz_mul float32, alpha_ unsafe.Pointer, alpha_mul float32, pfix_ unsafe.Pointer, pfix_mul float32, pfree_ unsafe.Pointer, pfree_mul float32, lambdafix_ unsafe.Pointer, lambdafix_mul float32, lambdafree_ unsafe.Pointer, lambdafree_mul float32, epsilonPrime_ unsafe.Pointer, epsilonPrime_mul float32, flt_ unsafe.Pointer, flt_mul float32, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("addoommfslonczewskitorque")
	}

	addoommfslonczewskitorque_args.Lock()
	defer addoommfslonczewskitorque_args.Unlock()

	addoommfslonczewskitorque_args.arg_tx = tx
	addoommfslonczewskitorque_args.arg_ty = ty
	addoommfslonczewskitorque_args.arg_tz = tz
	addoommfslonczewskitorque_args.arg_mx = mx
	addoommfslonczewskitorque_args.arg_my = my
	addoommfslonczewskitorque_args.arg_mz = mz
	addoommfslonczewskitorque_args.arg_Ms_ = Ms_
	addoommfslonczewskitorque_args.arg_Ms_mul = Ms_mul
	addoommfslonczewskitorque_args.arg_jz_ = jz_
	addoommfslonczewskitorque_args.arg_jz_mul = jz_mul
	addoommfslonczewskitorque_args.arg_px_ = px_
	addoommfslonczewskitorque_args.arg_px_mul = px_mul
	addoommfslonczewskitorque_args.arg_py_ = py_
	addoommfslonczewskitorque_args.arg_py_mul = py_mul
	addoommfslonczewskitorque_args.arg_pz_ = pz_
	addoommfslonczewskitorque_args.arg_pz_mul = pz_mul
	addoommfslonczewskitorque_args.arg_alpha_ = alpha_
	addoommfslonczewskitorque_args.arg_alpha_mul = alpha_mul
	addoommfslonczewskitorque_args.arg_pfix_ = pfix_
	addoommfslonczewskitorque_args.arg_pfix_mul = pfix_mul
	addoommfslonczewskitorque_args.arg_pfree_ = pfree_
	addoommfslonczewskitorque_args.arg_pfree_mul = pfree_mul
	addoommfslonczewskitorque_args.arg_lambdafix_ = lambdafix_
	addoommfslonczewskitorque_args.arg_lambdafix_mul = lambdafix_mul
	addoommfslonczewskitorque_args.arg_lambdafree_ = lambdafree_
	addoommfslonczewskitorque_args.arg_lambdafree_mul = lambdafree_mul
	addoommfslonczewskitorque_args.arg_epsilonPrime_ = epsilonPrime_
	addoommfslonczewskitorque_args.arg_epsilonPrime_mul = epsilonPrime_mul
	addoommfslonczewskitorque_args.arg_flt_ = flt_
	addoommfslonczewskitorque_args.arg_flt_mul = flt_mul
	addoommfslonczewskitorque_args.arg_N = N

	SetKernelArgWrapper("addoommfslonczewskitorque", 0, tx)
	SetKernelArgWrapper("addoommfslonczewskitorque", 1, ty)
	SetKernelArgWrapper("addoommfslonczewskitorque", 2, tz)
	SetKernelArgWrapper("addoommfslonczewskitorque", 3, mx)
	SetKernelArgWrapper("addoommfslonczewskitorque", 4, my)
	SetKernelArgWrapper("addoommfslonczewskitorque", 5, mz)
	SetKernelArgWrapper("addoommfslonczewskitorque", 6, Ms_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 7, Ms_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 8, jz_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 9, jz_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 10, px_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 11, px_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 12, py_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 13, py_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 14, pz_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 15, pz_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 16, alpha_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 17, alpha_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 18, pfix_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 19, pfix_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 20, pfree_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 21, pfree_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 22, lambdafix_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 23, lambdafix_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 24, lambdafree_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 25, lambdafree_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 26, epsilonPrime_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 27, epsilonPrime_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 28, flt_)
	SetKernelArgWrapper("addoommfslonczewskitorque", 29, flt_mul)
	SetKernelArgWrapper("addoommfslonczewskitorque", 30, N)

	//	args := addoommfslonczewskitorque_args.argptr[:]
	event := LaunchKernel("addoommfslonczewskitorque", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("addoommfslonczewskitorque")
	}

	return event
}
