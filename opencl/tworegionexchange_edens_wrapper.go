package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for tworegionexchange_edens kernel invocation
type tworegionexchange_edens_args_t struct {
	arg_Edens    unsafe.Pointer
	arg_mx       unsafe.Pointer
	arg_my       unsafe.Pointer
	arg_mz       unsafe.Pointer
	arg_Ms_      unsafe.Pointer
	arg_Ms_mul   float32
	arg_regions  unsafe.Pointer
	arg_regionA  uint8
	arg_regionB  uint8
	arg_strideX  int
	arg_strideY  int
	arg_strideZ  int
	arg_sig_eff  float32
	arg_sig2_eff float32
	arg_Nx       int
	arg_Ny       int
	arg_Nz       int
	argptr       [17]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for tworegionexchange_edens kernel invocation
var tworegionexchange_edens_args tworegionexchange_edens_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	tworegionexchange_edens_args.argptr[0] = unsafe.Pointer(&tworegionexchange_edens_args.arg_Edens)
	tworegionexchange_edens_args.argptr[1] = unsafe.Pointer(&tworegionexchange_edens_args.arg_mx)
	tworegionexchange_edens_args.argptr[2] = unsafe.Pointer(&tworegionexchange_edens_args.arg_my)
	tworegionexchange_edens_args.argptr[3] = unsafe.Pointer(&tworegionexchange_edens_args.arg_mz)
	tworegionexchange_edens_args.argptr[4] = unsafe.Pointer(&tworegionexchange_edens_args.arg_Ms_)
	tworegionexchange_edens_args.argptr[5] = unsafe.Pointer(&tworegionexchange_edens_args.arg_Ms_mul)
	tworegionexchange_edens_args.argptr[6] = unsafe.Pointer(&tworegionexchange_edens_args.arg_regions)
	tworegionexchange_edens_args.argptr[7] = unsafe.Pointer(&tworegionexchange_edens_args.arg_regionA)
	tworegionexchange_edens_args.argptr[8] = unsafe.Pointer(&tworegionexchange_edens_args.arg_regionB)
	tworegionexchange_edens_args.argptr[9] = unsafe.Pointer(&tworegionexchange_edens_args.arg_strideX)
	tworegionexchange_edens_args.argptr[10] = unsafe.Pointer(&tworegionexchange_edens_args.arg_strideY)
	tworegionexchange_edens_args.argptr[11] = unsafe.Pointer(&tworegionexchange_edens_args.arg_strideZ)
	tworegionexchange_edens_args.argptr[12] = unsafe.Pointer(&tworegionexchange_edens_args.arg_sig_eff)
	tworegionexchange_edens_args.argptr[13] = unsafe.Pointer(&tworegionexchange_edens_args.arg_sig2_eff)
	tworegionexchange_edens_args.argptr[14] = unsafe.Pointer(&tworegionexchange_edens_args.arg_Nx)
	tworegionexchange_edens_args.argptr[15] = unsafe.Pointer(&tworegionexchange_edens_args.arg_Ny)
	tworegionexchange_edens_args.argptr[16] = unsafe.Pointer(&tworegionexchange_edens_args.arg_Nz)
}

// Wrapper for tworegionexchange_edens OpenCL kernel, asynchronous.
func k_tworegionexchange_edens_async(Edens unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Ms_ unsafe.Pointer, Ms_mul float32, regions unsafe.Pointer, regionA uint8, regionB uint8, strideX int, strideY int, strideZ int, sig_eff float32, sig2_eff float32, Nx int, Ny int, Nz int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("tworegionexchange_edens")
	}

	tworegionexchange_edens_args.Lock()
	defer tworegionexchange_edens_args.Unlock()

	tworegionexchange_edens_args.arg_Edens = Edens
	tworegionexchange_edens_args.arg_mx = mx
	tworegionexchange_edens_args.arg_my = my
	tworegionexchange_edens_args.arg_mz = mz
	tworegionexchange_edens_args.arg_Ms_ = Ms_
	tworegionexchange_edens_args.arg_Ms_mul = Ms_mul
	tworegionexchange_edens_args.arg_regions = regions
	tworegionexchange_edens_args.arg_regionA = regionA
	tworegionexchange_edens_args.arg_regionB = regionB
	tworegionexchange_edens_args.arg_strideX = strideX
	tworegionexchange_edens_args.arg_strideY = strideY
	tworegionexchange_edens_args.arg_strideZ = strideZ
	tworegionexchange_edens_args.arg_sig_eff = sig_eff
	tworegionexchange_edens_args.arg_sig2_eff = sig2_eff
	tworegionexchange_edens_args.arg_Nx = Nx
	tworegionexchange_edens_args.arg_Ny = Ny
	tworegionexchange_edens_args.arg_Nz = Nz

	SetKernelArgWrapper("tworegionexchange_edens", 0, Edens)
	SetKernelArgWrapper("tworegionexchange_edens", 1, mx)
	SetKernelArgWrapper("tworegionexchange_edens", 2, my)
	SetKernelArgWrapper("tworegionexchange_edens", 3, mz)
	SetKernelArgWrapper("tworegionexchange_edens", 4, Ms_)
	SetKernelArgWrapper("tworegionexchange_edens", 5, Ms_mul)
	SetKernelArgWrapper("tworegionexchange_edens", 6, regions)
	SetKernelArgWrapper("tworegionexchange_edens", 7, regionA)
	SetKernelArgWrapper("tworegionexchange_edens", 8, regionB)
	SetKernelArgWrapper("tworegionexchange_edens", 9, strideX)
	SetKernelArgWrapper("tworegionexchange_edens", 10, strideY)
	SetKernelArgWrapper("tworegionexchange_edens", 11, strideZ)
	SetKernelArgWrapper("tworegionexchange_edens", 12, sig_eff)
	SetKernelArgWrapper("tworegionexchange_edens", 13, sig2_eff)
	SetKernelArgWrapper("tworegionexchange_edens", 14, Nx)
	SetKernelArgWrapper("tworegionexchange_edens", 15, Ny)
	SetKernelArgWrapper("tworegionexchange_edens", 16, Nz)

	//	args := tworegionexchange_edens_args.argptr[:]
	event := LaunchKernel("tworegionexchange_edens", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("tworegionexchange_edens")
	}

	return event
}
