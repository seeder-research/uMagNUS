package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for kernmulRSymm2Dz kernel invocation
type kernmulRSymm2Dz_args_t struct {
	arg_fftMz  unsafe.Pointer
	arg_fftKzz unsafe.Pointer
	arg_Nx     int
	arg_Ny     int
	argptr     [4]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for kernmulRSymm2Dz kernel invocation
var kernmulRSymm2Dz_args kernmulRSymm2Dz_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	kernmulRSymm2Dz_args.argptr[0] = unsafe.Pointer(&kernmulRSymm2Dz_args.arg_fftMz)
	kernmulRSymm2Dz_args.argptr[1] = unsafe.Pointer(&kernmulRSymm2Dz_args.arg_fftKzz)
	kernmulRSymm2Dz_args.argptr[2] = unsafe.Pointer(&kernmulRSymm2Dz_args.arg_Nx)
	kernmulRSymm2Dz_args.argptr[3] = unsafe.Pointer(&kernmulRSymm2Dz_args.arg_Ny)
}

// Wrapper for kernmulRSymm2Dz OpenCL kernel, asynchronous.
func k_kernmulRSymm2Dz_async(fftMz unsafe.Pointer, fftKzz unsafe.Pointer, Nx int, Ny int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("kernmulRSymm2Dz")
	}

	kernmulRSymm2Dz_args.Lock()
	defer kernmulRSymm2Dz_args.Unlock()

	kernmulRSymm2Dz_args.arg_fftMz = fftMz
	kernmulRSymm2Dz_args.arg_fftKzz = fftKzz
	kernmulRSymm2Dz_args.arg_Nx = Nx
	kernmulRSymm2Dz_args.arg_Ny = Ny

	SetKernelArgWrapper("kernmulRSymm2Dz", 0, fftMz)
	SetKernelArgWrapper("kernmulRSymm2Dz", 1, fftKzz)
	SetKernelArgWrapper("kernmulRSymm2Dz", 2, Nx)
	SetKernelArgWrapper("kernmulRSymm2Dz", 3, Ny)

	//	args := kernmulRSymm2Dz_args.argptr[:]
	event := LaunchKernel("kernmulRSymm2Dz", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("kernmulRSymm2Dz")
	}

	return event
}
