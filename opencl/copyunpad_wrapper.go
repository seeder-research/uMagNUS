package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for copyunpad kernel invocation
type copyunpad_args_t struct {
	arg_dst unsafe.Pointer
	arg_Dx  int
	arg_Dy  int
	arg_Dz  int
	arg_src unsafe.Pointer
	arg_Sx  int
	arg_Sy  int
	arg_Sz  int
	argptr  [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for copyunpad kernel invocation
var copyunpad_args copyunpad_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	copyunpad_args.argptr[0] = unsafe.Pointer(&copyunpad_args.arg_dst)
	copyunpad_args.argptr[1] = unsafe.Pointer(&copyunpad_args.arg_Dx)
	copyunpad_args.argptr[2] = unsafe.Pointer(&copyunpad_args.arg_Dy)
	copyunpad_args.argptr[3] = unsafe.Pointer(&copyunpad_args.arg_Dz)
	copyunpad_args.argptr[4] = unsafe.Pointer(&copyunpad_args.arg_src)
	copyunpad_args.argptr[5] = unsafe.Pointer(&copyunpad_args.arg_Sx)
	copyunpad_args.argptr[6] = unsafe.Pointer(&copyunpad_args.arg_Sy)
	copyunpad_args.argptr[7] = unsafe.Pointer(&copyunpad_args.arg_Sz)
}

// Wrapper for copyunpad OpenCL kernel, asynchronous.
func k_copyunpad_async(dst unsafe.Pointer, Dx int, Dy int, Dz int, src unsafe.Pointer, Sx int, Sy int, Sz int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("copyunpad")
	}

	copyunpad_args.Lock()
	defer copyunpad_args.Unlock()

	copyunpad_args.arg_dst = dst
	copyunpad_args.arg_Dx = Dx
	copyunpad_args.arg_Dy = Dy
	copyunpad_args.arg_Dz = Dz
	copyunpad_args.arg_src = src
	copyunpad_args.arg_Sx = Sx
	copyunpad_args.arg_Sy = Sy
	copyunpad_args.arg_Sz = Sz

	SetKernelArgWrapper("copyunpad", 0, dst)
	SetKernelArgWrapper("copyunpad", 1, Dx)
	SetKernelArgWrapper("copyunpad", 2, Dy)
	SetKernelArgWrapper("copyunpad", 3, Dz)
	SetKernelArgWrapper("copyunpad", 4, src)
	SetKernelArgWrapper("copyunpad", 5, Sx)
	SetKernelArgWrapper("copyunpad", 6, Sy)
	SetKernelArgWrapper("copyunpad", 7, Sz)

	//	args := copyunpad_args.argptr[:]
	event := LaunchKernel("copyunpad", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("copyunpad")
	}

	return event
}
