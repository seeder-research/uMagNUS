package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for setPhi kernel invocation
type setPhi_args_t struct {
	arg_phi unsafe.Pointer
	arg_mx  unsafe.Pointer
	arg_my  unsafe.Pointer
	arg_Nx  int
	arg_Ny  int
	arg_Nz  int
	argptr  [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for setPhi kernel invocation
var setPhi_args setPhi_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	setPhi_args.argptr[0] = unsafe.Pointer(&setPhi_args.arg_phi)
	setPhi_args.argptr[1] = unsafe.Pointer(&setPhi_args.arg_mx)
	setPhi_args.argptr[2] = unsafe.Pointer(&setPhi_args.arg_my)
	setPhi_args.argptr[3] = unsafe.Pointer(&setPhi_args.arg_Nx)
	setPhi_args.argptr[4] = unsafe.Pointer(&setPhi_args.arg_Ny)
	setPhi_args.argptr[5] = unsafe.Pointer(&setPhi_args.arg_Nz)
}

// Wrapper for setPhi OpenCL kernel, asynchronous.
func k_setPhi_async(phi unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, Nx int, Ny int, Nz int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("setPhi")
	}

	setPhi_args.Lock()
	defer setPhi_args.Unlock()

	setPhi_args.arg_phi = phi
	setPhi_args.arg_mx = mx
	setPhi_args.arg_my = my
	setPhi_args.arg_Nx = Nx
	setPhi_args.arg_Ny = Ny
	setPhi_args.arg_Nz = Nz

	SetKernelArgWrapper("setPhi", 0, phi)
	SetKernelArgWrapper("setPhi", 1, mx)
	SetKernelArgWrapper("setPhi", 2, my)
	SetKernelArgWrapper("setPhi", 3, Nx)
	SetKernelArgWrapper("setPhi", 4, Ny)
	SetKernelArgWrapper("setPhi", 5, Nz)

	//	args := setPhi_args.argptr[:]
	event := LaunchKernel("setPhi", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("setPhi")
	}

	return event
}
