package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for addexchange kernel invocation
type addexchange_args_t struct {
	arg_Bx      unsafe.Pointer
	arg_By      unsafe.Pointer
	arg_Bz      unsafe.Pointer
	arg_mx      unsafe.Pointer
	arg_my      unsafe.Pointer
	arg_mz      unsafe.Pointer
	arg_Ms_     unsafe.Pointer
	arg_Ms_mul  float32
	arg_aLUT2d  unsafe.Pointer
	arg_regions unsafe.Pointer
	arg_wx      float32
	arg_wy      float32
	arg_wz      float32
	arg_Nx      int
	arg_Ny      int
	arg_Nz      int
	arg_PBC     uint8
	argptr      [17]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for addexchange kernel invocation
var addexchange_args addexchange_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	addexchange_args.argptr[0] = unsafe.Pointer(&addexchange_args.arg_Bx)
	addexchange_args.argptr[1] = unsafe.Pointer(&addexchange_args.arg_By)
	addexchange_args.argptr[2] = unsafe.Pointer(&addexchange_args.arg_Bz)
	addexchange_args.argptr[3] = unsafe.Pointer(&addexchange_args.arg_mx)
	addexchange_args.argptr[4] = unsafe.Pointer(&addexchange_args.arg_my)
	addexchange_args.argptr[5] = unsafe.Pointer(&addexchange_args.arg_mz)
	addexchange_args.argptr[6] = unsafe.Pointer(&addexchange_args.arg_Ms_)
	addexchange_args.argptr[7] = unsafe.Pointer(&addexchange_args.arg_Ms_mul)
	addexchange_args.argptr[8] = unsafe.Pointer(&addexchange_args.arg_aLUT2d)
	addexchange_args.argptr[9] = unsafe.Pointer(&addexchange_args.arg_regions)
	addexchange_args.argptr[10] = unsafe.Pointer(&addexchange_args.arg_wx)
	addexchange_args.argptr[11] = unsafe.Pointer(&addexchange_args.arg_wy)
	addexchange_args.argptr[12] = unsafe.Pointer(&addexchange_args.arg_wz)
	addexchange_args.argptr[13] = unsafe.Pointer(&addexchange_args.arg_Nx)
	addexchange_args.argptr[14] = unsafe.Pointer(&addexchange_args.arg_Ny)
	addexchange_args.argptr[15] = unsafe.Pointer(&addexchange_args.arg_Nz)
	addexchange_args.argptr[16] = unsafe.Pointer(&addexchange_args.arg_PBC)
}

// Wrapper for addexchange OpenCL kernel, asynchronous.
func k_addexchange_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Ms_ unsafe.Pointer, Ms_mul float32, aLUT2d unsafe.Pointer, regions unsafe.Pointer, wx float32, wy float32, wz float32, Nx int, Ny int, Nz int, PBC uint8, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("addexchange")
	}

	addexchange_args.Lock()
	defer addexchange_args.Unlock()

	addexchange_args.arg_Bx = Bx
	addexchange_args.arg_By = By
	addexchange_args.arg_Bz = Bz
	addexchange_args.arg_mx = mx
	addexchange_args.arg_my = my
	addexchange_args.arg_mz = mz
	addexchange_args.arg_Ms_ = Ms_
	addexchange_args.arg_Ms_mul = Ms_mul
	addexchange_args.arg_aLUT2d = aLUT2d
	addexchange_args.arg_regions = regions
	addexchange_args.arg_wx = wx
	addexchange_args.arg_wy = wy
	addexchange_args.arg_wz = wz
	addexchange_args.arg_Nx = Nx
	addexchange_args.arg_Ny = Ny
	addexchange_args.arg_Nz = Nz
	addexchange_args.arg_PBC = PBC

	SetKernelArgWrapper("addexchange", 0, Bx)
	SetKernelArgWrapper("addexchange", 1, By)
	SetKernelArgWrapper("addexchange", 2, Bz)
	SetKernelArgWrapper("addexchange", 3, mx)
	SetKernelArgWrapper("addexchange", 4, my)
	SetKernelArgWrapper("addexchange", 5, mz)
	SetKernelArgWrapper("addexchange", 6, Ms_)
	SetKernelArgWrapper("addexchange", 7, Ms_mul)
	SetKernelArgWrapper("addexchange", 8, aLUT2d)
	SetKernelArgWrapper("addexchange", 9, regions)
	SetKernelArgWrapper("addexchange", 10, wx)
	SetKernelArgWrapper("addexchange", 11, wy)
	SetKernelArgWrapper("addexchange", 12, wz)
	SetKernelArgWrapper("addexchange", 13, Nx)
	SetKernelArgWrapper("addexchange", 14, Ny)
	SetKernelArgWrapper("addexchange", 15, Nz)
	SetKernelArgWrapper("addexchange", 16, PBC)

	//	args := addexchange_args.argptr[:]
	event := LaunchKernel("addexchange", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("addexchange")
	}

	return event
}
