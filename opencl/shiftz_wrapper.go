package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for shiftz kernel invocation
type shiftz_args_t struct {
	arg_dst    unsafe.Pointer
	arg_src    unsafe.Pointer
	arg_Nx     int
	arg_Ny     int
	arg_Nz     int
	arg_shz    int
	arg_clampL float32
	arg_clampR float32
	argptr     [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for shiftz kernel invocation
var shiftz_args shiftz_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	shiftz_args.argptr[0] = unsafe.Pointer(&shiftz_args.arg_dst)
	shiftz_args.argptr[1] = unsafe.Pointer(&shiftz_args.arg_src)
	shiftz_args.argptr[2] = unsafe.Pointer(&shiftz_args.arg_Nx)
	shiftz_args.argptr[3] = unsafe.Pointer(&shiftz_args.arg_Ny)
	shiftz_args.argptr[4] = unsafe.Pointer(&shiftz_args.arg_Nz)
	shiftz_args.argptr[5] = unsafe.Pointer(&shiftz_args.arg_shz)
	shiftz_args.argptr[6] = unsafe.Pointer(&shiftz_args.arg_clampL)
	shiftz_args.argptr[7] = unsafe.Pointer(&shiftz_args.arg_clampR)
}

// Wrapper for shiftz OpenCL kernel, asynchronous.
func k_shiftz_async(dst unsafe.Pointer, src unsafe.Pointer, Nx int, Ny int, Nz int, shz int, clampL float32, clampR float32, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("shiftz")
	}

	shiftz_args.Lock()
	defer shiftz_args.Unlock()

	shiftz_args.arg_dst = dst
	shiftz_args.arg_src = src
	shiftz_args.arg_Nx = Nx
	shiftz_args.arg_Ny = Ny
	shiftz_args.arg_Nz = Nz
	shiftz_args.arg_shz = shz
	shiftz_args.arg_clampL = clampL
	shiftz_args.arg_clampR = clampR

	SetKernelArgWrapper("shiftz", 0, dst)
	SetKernelArgWrapper("shiftz", 1, src)
	SetKernelArgWrapper("shiftz", 2, Nx)
	SetKernelArgWrapper("shiftz", 3, Ny)
	SetKernelArgWrapper("shiftz", 4, Nz)
	SetKernelArgWrapper("shiftz", 5, shz)
	SetKernelArgWrapper("shiftz", 6, clampL)
	SetKernelArgWrapper("shiftz", 7, clampR)

	//	args := shiftz_args.argptr[:]
	event := LaunchKernel("shiftz", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("shiftz")
	}

	return event
}
