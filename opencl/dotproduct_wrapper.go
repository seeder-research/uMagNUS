package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for dotproduct kernel invocation
type dotproduct_args_t struct {
	arg_dst       unsafe.Pointer
	arg_prefactor float32
	arg_ax        unsafe.Pointer
	arg_ay        unsafe.Pointer
	arg_az        unsafe.Pointer
	arg_bx        unsafe.Pointer
	arg_by        unsafe.Pointer
	arg_bz        unsafe.Pointer
	arg_N         int
	argptr        [9]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for dotproduct kernel invocation
var dotproduct_args dotproduct_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	dotproduct_args.argptr[0] = unsafe.Pointer(&dotproduct_args.arg_dst)
	dotproduct_args.argptr[1] = unsafe.Pointer(&dotproduct_args.arg_prefactor)
	dotproduct_args.argptr[2] = unsafe.Pointer(&dotproduct_args.arg_ax)
	dotproduct_args.argptr[3] = unsafe.Pointer(&dotproduct_args.arg_ay)
	dotproduct_args.argptr[4] = unsafe.Pointer(&dotproduct_args.arg_az)
	dotproduct_args.argptr[5] = unsafe.Pointer(&dotproduct_args.arg_bx)
	dotproduct_args.argptr[6] = unsafe.Pointer(&dotproduct_args.arg_by)
	dotproduct_args.argptr[7] = unsafe.Pointer(&dotproduct_args.arg_bz)
	dotproduct_args.argptr[8] = unsafe.Pointer(&dotproduct_args.arg_N)
}

// Wrapper for dotproduct OpenCL kernel, asynchronous.
func k_dotproduct_async(dst unsafe.Pointer, prefactor float32, ax unsafe.Pointer, ay unsafe.Pointer, az unsafe.Pointer, bx unsafe.Pointer, by unsafe.Pointer, bz unsafe.Pointer, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("dotproduct")
	}

	dotproduct_args.Lock()
	defer dotproduct_args.Unlock()

	dotproduct_args.arg_dst = dst
	dotproduct_args.arg_prefactor = prefactor
	dotproduct_args.arg_ax = ax
	dotproduct_args.arg_ay = ay
	dotproduct_args.arg_az = az
	dotproduct_args.arg_bx = bx
	dotproduct_args.arg_by = by
	dotproduct_args.arg_bz = bz
	dotproduct_args.arg_N = N

	SetKernelArgWrapper("dotproduct", 0, dst)
	SetKernelArgWrapper("dotproduct", 1, prefactor)
	SetKernelArgWrapper("dotproduct", 2, ax)
	SetKernelArgWrapper("dotproduct", 3, ay)
	SetKernelArgWrapper("dotproduct", 4, az)
	SetKernelArgWrapper("dotproduct", 5, bx)
	SetKernelArgWrapper("dotproduct", 6, by)
	SetKernelArgWrapper("dotproduct", 7, bz)
	SetKernelArgWrapper("dotproduct", 8, N)

	//	args := dotproduct_args.argptr[:]
	event := LaunchKernel("dotproduct", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("dotproduct")
	}

	return event
}
