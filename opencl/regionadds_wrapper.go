package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for regionadds kernel invocation
type regionadds_args_t struct {
	arg_dst     unsafe.Pointer
	arg_LUT     unsafe.Pointer
	arg_regions unsafe.Pointer
	arg_N       int
	argptr      [4]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for regionadds kernel invocation
var regionadds_args regionadds_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	regionadds_args.argptr[0] = unsafe.Pointer(&regionadds_args.arg_dst)
	regionadds_args.argptr[1] = unsafe.Pointer(&regionadds_args.arg_LUT)
	regionadds_args.argptr[2] = unsafe.Pointer(&regionadds_args.arg_regions)
	regionadds_args.argptr[3] = unsafe.Pointer(&regionadds_args.arg_N)
}

// Wrapper for regionadds OpenCL kernel, asynchronous.
func k_regionadds_async(dst unsafe.Pointer, LUT unsafe.Pointer, regions unsafe.Pointer, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("regionadds")
	}

	regionadds_args.Lock()
	defer regionadds_args.Unlock()

	regionadds_args.arg_dst = dst
	regionadds_args.arg_LUT = LUT
	regionadds_args.arg_regions = regions
	regionadds_args.arg_N = N

	SetKernelArgWrapper("regionadds", 0, dst)
	SetKernelArgWrapper("regionadds", 1, LUT)
	SetKernelArgWrapper("regionadds", 2, regions)
	SetKernelArgWrapper("regionadds", 3, N)

	//	args := regionadds_args.argptr[:]
	event := LaunchKernel("regionadds", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("regionadds")
	}

	return event
}
