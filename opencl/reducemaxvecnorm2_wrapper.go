package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for reducemaxvecnorm2 kernel invocation
type reducemaxvecnorm2_args_t struct {
	arg_x       unsafe.Pointer
	arg_y       unsafe.Pointer
	arg_z       unsafe.Pointer
	arg_dst     unsafe.Pointer
	arg_initVal float32
	arg_n       int
	argptr      [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for reducemaxvecnorm2 kernel invocation
var reducemaxvecnorm2_args reducemaxvecnorm2_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	reducemaxvecnorm2_args.argptr[0] = unsafe.Pointer(&reducemaxvecnorm2_args.arg_x)
	reducemaxvecnorm2_args.argptr[1] = unsafe.Pointer(&reducemaxvecnorm2_args.arg_y)
	reducemaxvecnorm2_args.argptr[2] = unsafe.Pointer(&reducemaxvecnorm2_args.arg_z)
	reducemaxvecnorm2_args.argptr[3] = unsafe.Pointer(&reducemaxvecnorm2_args.arg_dst)
	reducemaxvecnorm2_args.argptr[4] = unsafe.Pointer(&reducemaxvecnorm2_args.arg_initVal)
	reducemaxvecnorm2_args.argptr[5] = unsafe.Pointer(&reducemaxvecnorm2_args.arg_n)
}

// Wrapper for reducemaxvecnorm2 OpenCL kernel, asynchronous.
func k_reducemaxvecnorm2_async(x unsafe.Pointer, y unsafe.Pointer, z unsafe.Pointer, dst unsafe.Pointer, initVal float32, n int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("reducemaxvecnorm2")
	}

	reducemaxvecnorm2_args.Lock()
	defer reducemaxvecnorm2_args.Unlock()

	reducemaxvecnorm2_args.arg_x = x
	reducemaxvecnorm2_args.arg_y = y
	reducemaxvecnorm2_args.arg_z = z
	reducemaxvecnorm2_args.arg_dst = dst
	reducemaxvecnorm2_args.arg_initVal = initVal
	reducemaxvecnorm2_args.arg_n = n

	SetKernelArgWrapper("reducemaxvecnorm2", 0, x)
	SetKernelArgWrapper("reducemaxvecnorm2", 1, y)
	SetKernelArgWrapper("reducemaxvecnorm2", 2, z)
	SetKernelArgWrapper("reducemaxvecnorm2", 3, dst)
	SetKernelArgWrapper("reducemaxvecnorm2", 4, initVal)
	SetKernelArgWrapper("reducemaxvecnorm2", 5, n)
	KernList["reducemaxvecnorm2"].SetArgUnsafe(6, cfg.Block[0]*cfg.Block[1]*cfg.Block[2]*SIZEOF_FLOAT32, nil)

	//	args := reducemaxvecnorm2_args.argptr[:]
	event := LaunchKernel("reducemaxvecnorm2", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("reducemaxvecnorm2")
	}

	return event
}
