package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for normalize2 kernel invocation
type normalize2_args_t struct {
	arg_vx  unsafe.Pointer
	arg_vy  unsafe.Pointer
	arg_vz  unsafe.Pointer
	arg_vol unsafe.Pointer
	arg_N   int
	argptr  [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for normalize2 kernel invocation
var normalize2_args normalize2_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	normalize2_args.argptr[0] = unsafe.Pointer(&normalize2_args.arg_vx)
	normalize2_args.argptr[1] = unsafe.Pointer(&normalize2_args.arg_vy)
	normalize2_args.argptr[2] = unsafe.Pointer(&normalize2_args.arg_vz)
	normalize2_args.argptr[3] = unsafe.Pointer(&normalize2_args.arg_vol)
	normalize2_args.argptr[4] = unsafe.Pointer(&normalize2_args.arg_N)
}

// Wrapper for normalize2 OpenCL kernel, asynchronous.
func k_normalize2_async(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, vol unsafe.Pointer, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("normalize2")
	}

	normalize2_args.Lock()
	defer normalize2_args.Unlock()

	normalize2_args.arg_vx = vx
	normalize2_args.arg_vy = vy
	normalize2_args.arg_vz = vz
	normalize2_args.arg_vol = vol
	normalize2_args.arg_N = N

	SetKernelArgWrapper("normalize2", 0, vx)
	SetKernelArgWrapper("normalize2", 1, vy)
	SetKernelArgWrapper("normalize2", 2, vz)
	SetKernelArgWrapper("normalize2", 3, vol)
	SetKernelArgWrapper("normalize2", 4, N)

	//	args := normalize2_args.argptr[:]
	event := LaunchKernel("normalize2", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("normalize2")
	}

	return event
}
