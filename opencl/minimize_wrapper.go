package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for minimize kernel invocation
type minimize_args_t struct {
	arg_mx  unsafe.Pointer
	arg_my  unsafe.Pointer
	arg_mz  unsafe.Pointer
	arg_m0x unsafe.Pointer
	arg_m0y unsafe.Pointer
	arg_m0z unsafe.Pointer
	arg_tx  unsafe.Pointer
	arg_ty  unsafe.Pointer
	arg_tz  unsafe.Pointer
	arg_dt  float32
	arg_N   int
	argptr  [11]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for minimize kernel invocation
var minimize_args minimize_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	minimize_args.argptr[0] = unsafe.Pointer(&minimize_args.arg_mx)
	minimize_args.argptr[1] = unsafe.Pointer(&minimize_args.arg_my)
	minimize_args.argptr[2] = unsafe.Pointer(&minimize_args.arg_mz)
	minimize_args.argptr[3] = unsafe.Pointer(&minimize_args.arg_m0x)
	minimize_args.argptr[4] = unsafe.Pointer(&minimize_args.arg_m0y)
	minimize_args.argptr[5] = unsafe.Pointer(&minimize_args.arg_m0z)
	minimize_args.argptr[6] = unsafe.Pointer(&minimize_args.arg_tx)
	minimize_args.argptr[7] = unsafe.Pointer(&minimize_args.arg_ty)
	minimize_args.argptr[8] = unsafe.Pointer(&minimize_args.arg_tz)
	minimize_args.argptr[9] = unsafe.Pointer(&minimize_args.arg_dt)
	minimize_args.argptr[10] = unsafe.Pointer(&minimize_args.arg_N)
}

// Wrapper for minimize OpenCL kernel, asynchronous.
func k_minimize_async(mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, m0x unsafe.Pointer, m0y unsafe.Pointer, m0z unsafe.Pointer, tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, dt float32, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("minimize")
	}

	minimize_args.Lock()
	defer minimize_args.Unlock()

	minimize_args.arg_mx = mx
	minimize_args.arg_my = my
	minimize_args.arg_mz = mz
	minimize_args.arg_m0x = m0x
	minimize_args.arg_m0y = m0y
	minimize_args.arg_m0z = m0z
	minimize_args.arg_tx = tx
	minimize_args.arg_ty = ty
	minimize_args.arg_tz = tz
	minimize_args.arg_dt = dt
	minimize_args.arg_N = N

	SetKernelArgWrapper("minimize", 0, mx)
	SetKernelArgWrapper("minimize", 1, my)
	SetKernelArgWrapper("minimize", 2, mz)
	SetKernelArgWrapper("minimize", 3, m0x)
	SetKernelArgWrapper("minimize", 4, m0y)
	SetKernelArgWrapper("minimize", 5, m0z)
	SetKernelArgWrapper("minimize", 6, tx)
	SetKernelArgWrapper("minimize", 7, ty)
	SetKernelArgWrapper("minimize", 8, tz)
	SetKernelArgWrapper("minimize", 9, dt)
	SetKernelArgWrapper("minimize", 10, N)

	//	args := minimize_args.argptr[:]
	event := LaunchKernel("minimize", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("minimize")
	}

	return event
}
