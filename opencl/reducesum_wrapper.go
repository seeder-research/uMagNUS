package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for reducesum kernel invocation
type reducesum_args_t struct {
	arg_src     unsafe.Pointer
	arg_dst     unsafe.Pointer
	arg_initVal float32
	arg_fac     int
	arg_group_n int
	arg_n       int
	argptr      [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for reducesum kernel invocation
var reducesum_args reducesum_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	reducesum_args.argptr[0] = unsafe.Pointer(&reducesum_args.arg_src)
	reducesum_args.argptr[1] = unsafe.Pointer(&reducesum_args.arg_dst)
	reducesum_args.argptr[2] = unsafe.Pointer(&reducesum_args.arg_initVal)
	reducesum_args.argptr[3] = unsafe.Pointer(&reducesum_args.arg_fac)
	reducesum_args.argptr[4] = unsafe.Pointer(&reducesum_args.arg_group_n)
	reducesum_args.argptr[5] = unsafe.Pointer(&reducesum_args.arg_n)
}

// Wrapper for reducesum OpenCL kernel, asynchronous.
func k_reducesum_async(src unsafe.Pointer, dst unsafe.Pointer, initVal float32, fac int, group_n int, n int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("reducesum")
	}

	reducesum_args.Lock()
	defer reducesum_args.Unlock()

	reducesum_args.arg_src = src
	reducesum_args.arg_dst = dst
	reducesum_args.arg_initVal = initVal
	reducesum_args.arg_fac = fac
	reducesum_args.arg_group_n = group_n
	reducesum_args.arg_n = n

	SetKernelArgWrapper("reducesum", 0, src)
	SetKernelArgWrapper("reducesum", 1, dst)
	SetKernelArgWrapper("reducesum", 2, initVal)
	SetKernelArgWrapper("reducesum", 3, fac)
	SetKernelArgWrapper("reducesum", 4, group_n)
	SetKernelArgWrapper("reducesum", 5, n)
	KernList["reducesum"].SetArgUnsafe(6, cfg.Block[0]*cfg.Block[1]*cfg.Block[2]*SIZEOF_FLOAT32, nil)

	//	args := reducesum_args.argptr[:]
	event := LaunchKernel("reducesum", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("reducesum")
	}

	return event
}
