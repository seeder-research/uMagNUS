type MTGP32dc_params_fast_t struct {
	mexp        int        /**< Mersenne exponent. This is redundant. */
	pos         int        /**< pick up position. */
	sh1         int        /**< shift value 1. 0 < sh1 < 32. */
	sh2         int        /**< shift value 2. 0 < sh2 < 32. */
	tbl         [16]uint32 /**< a small matrix. */
	tmp_tbl     [16]uint32 /**< a small matrix for tempering. */
	flt_tmp_tbl [16]uint32 /**< a small matrix for tempering and converting to float. */
	mask        uint32     /**< This is a mask for state space */
	poly_sha1   [21]string /**< SHA1 digest */
}

type MTGP32dc_params_array_ptr struct {
	Ini             bool
	Pos             []int
	Sh1             []int
	Sh2             []int
	Rec             []uint32
	Temper          []uint32
	Flt_temper      []uint32
	Status          []uint32
	Pos_buf         *cl.MemObject
	Sh1_buf         *cl.MemObject
	Sh2_buf         *cl.MemObject
	Rec_buf         *cl.MemObject
	Temper_buf      *cl.MemObject
	Flt_temper_buf  *cl.MemObject
	Status_buf      *cl.MemObject
	Pos_size        int
	Sh1_size        int
	Sh2_size        int
	Rec_size        int
	Temper_size     int
	Flt_temper_size int
	Status_size     int
	GroupSize       int
	GroupCount      int
}

func NewMTGPParams() *MTGP32dc_params_array_ptr {
	q := new(MTGP32dc_params_array_ptr)
	q.Ini = false
	q.GroupSize = MTGPDC_N
	q.GroupCount = 1
	return q
}

func (p *MTGP32dc_params_array_ptr) GetMTGPArrays() {
	if (p.GroupSize > mtgpdc_params_num) || (p.GroupSize < 0) {
		log.Fatalln("Input range: 0 < GroupSize < ", mtgpdc_params_num)
	}
	rec_array := make([]uint32, (MTGPDC_TS * p.GroupCount))
	temper_array := make([]uint32, (MTGPDC_TS * p.GroupCount))
	flt_temper_array := make([]uint32, (MTGPDC_TS * p.GroupCount))
	pos_array := make([]int, p.GroupCount)
	sh1_array := make([]int, p.GroupCount)
	sh2_array := make([]int, p.GroupCount)
	status_array := make([]uint32, MTGPDC_N * p.GroupCount)
	for i := 0; i < p.GroupCount; i++ {
		for j := 0; j < MTGPDC_TS; j++ {
			rec_array[(i*MTGPDC_TS)+j] = MTGP32_params_fast_[i].tbl[j]
			temper_array[(i*MTGPDC_TS)+j] = MTGP32_params_fast_[i].tmp_tbl[j]
			flt_temper_array[(i*MTGPDC_TS)+j] = MTGP32_params_fast_[i].flt_tmp_tbl[j]
		}
		pos_array[i] = MTGP32_params_fast_[i].pos
		sh1_array[i] = MTGP32_params_fast_[i].sh1
		sh2_array[i] = MTGP32_params_fast_[i].sh2
	}

	p.Pos = pos_array
	p.Pos_size = int(unsafe.Sizeof(pos_array[0])) * len(pos_array)
	p.Sh1 = sh1_array
	p.Sh1_size = int(unsafe.Sizeof(sh1_array[0])) * len(sh1_array)
	p.Sh2 = sh2_array
	p.Sh2_size = int(unsafe.Sizeof(sh2_array[0])) * len(sh2_array)
	p.Rec = rec_array
	p.Rec_size = int(unsafe.Sizeof(rec_array[0])) * len(rec_array)
	p.Temper = temper_array
	p.Temper_size = int(unsafe.Sizeof(temper_array[0])) * len(temper_array)
	p.Flt_temper = flt_temper_array
	p.Flt_temper_size = int(unsafe.Sizeof(flt_temper_array[0])) * len(flt_temper_array)
	p.Status = status_array
	p.Status_size = int(unsafe.Sizeof(status_array[0])) * len(status_array)

	p.Pos_buf = nil
	p.Sh1_buf = nil
	p.Sh2_buf = nil
	p.Rec_buf = nil
	p.Temper_buf = nil
	p.Flt_temper_buf = nil
	p.Status_buf = nil
}

func (p *MTGP32dc_params_array_ptr) CreateParamBuffers(context *cl.Context) {
	var err error
	p.Pos_buf, err = context.CreateBufferUnsafe(cl.MemReadOnly, int(unsafe.Sizeof(p.Pos[0]))*len(p.Pos), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 pos array!")
	}
	p.Sh1_buf, err = context.CreateBufferUnsafe(cl.MemReadOnly, int(unsafe.Sizeof(p.Sh1[0]))*len(p.Sh1), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 sh1 array!")
	}
	p.Sh2_buf, err = context.CreateBufferUnsafe(cl.MemReadOnly, int(unsafe.Sizeof(p.Sh2[0]))*len(p.Sh2), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 sh2 array!")
	}
	p.Rec_buf, err = context.CreateBufferUnsafe(cl.MemReadOnly, int(unsafe.Sizeof(p.Rec[0]))*len(p.Rec), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 rec array!")
	}
	p.Temper_buf, err = context.CreateBufferUnsafe(cl.MemReadOnly, int(unsafe.Sizeof(p.Temper[0]))*len(p.Temper), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 temper array!")
	}
	p.Flt_temper_buf, err = context.CreateBufferUnsafe(cl.MemReadOnly, int(unsafe.Sizeof(p.Flt_temper[0]))*len(p.Flt_temper), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 flt_temper array!")
	}
	p.Status_buf, err = context.CreateBufferUnsafe(cl.MemReadWrite, int(unsafe.Sizeof(p.Status[0]))*len(p.Status), nil)
	if err != nil {
		log.Fatalln("Unable to create buffer for MTGP32 status array!")
	}
}

func (p *MTGP32dc_params_array_ptr) LoadAllParamBuffersToDevice(queue *cl.CommandQueue, eventWaitList []*cl.Event) ([]*cl.Event, error) {
	var err error

	var pos_event *cl.Event
	pos_event, err = queue.EnqueueWriteBuffer(p.Pos_buf, false, 0, p.Pos_size, unsafe.Pointer(&p.Pos[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write pos buffer to device: ", err)
	}

	var sh1_event *cl.Event
	sh1_event, err = queue.EnqueueWriteBuffer(p.Sh1_buf, false, 0, p.Sh1_size, unsafe.Pointer(&p.Sh1[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write sh1 buffer to device: ", err)
	}

	var sh2_event *cl.Event
	sh2_event, err = queue.EnqueueWriteBuffer(p.Sh2_buf, false, 0, p.Sh2_size, unsafe.Pointer(&p.Sh2[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write sh2 buffer to device: ", err)
	}

	var rec_event *cl.Event
	rec_event, err = queue.EnqueueWriteBuffer(p.Rec_buf, false, 0, p.Rec_size, unsafe.Pointer(&p.Rec[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write rec buffer to device: ", err)
	}

	var temper_event *cl.Event
	temper_event, err = queue.EnqueueWriteBuffer(p.Temper_buf, false, 0, p.Temper_size, unsafe.Pointer(&p.Temper[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write temper buffer to device: ", err)
	}

	var flt_temper_event *cl.Event
	flt_temper_event, err = queue.EnqueueWriteBuffer(p.Flt_temper_buf, false, 0, p.Flt_temper_size, unsafe.Pointer(&p.Flt_temper[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write flt_temper buffer to device: ", err)
	}

	return []*cl.Event{pos_event, sh1_event, sh2_event, rec_event, temper_event, flt_temper_event}, nil
}

func (p *MTGP32dc_params_array_ptr) LoadStatusBuffersToDevice(queue *cl.CommandQueue, eventWaitList []*cl.Event) (*cl.Event, error) {
	status_event, err := queue.EnqueueWriteBuffer(p.Status_buf, false, 0, p.Status_size, unsafe.Pointer(&p.Status[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to write status buffer to device: ", err)
	}
	return status_event, nil
}

func (p *MTGP32dc_params_array_ptr) LoadStatusBuffersFromDevice(queue *cl.CommandQueue, eventWaitList []*cl.Event) (*cl.Event, error) {
	status_event, err := queue.EnqueueReadBuffer(p.Status_buf, false, 0, p.Status_size, unsafe.Pointer(&p.Status[0]), eventWaitList)
	if err != nil {
		log.Fatalln("Unable to read status buffer from device: ", err)
	}
	return status_event, nil
}

func (p *MTGP32dc_params_array_ptr) SetRecursionArray(arr []uint32) {
	p.Rec = arr
}

func (p *MTGP32dc_params_array_ptr) GetRecursionArray() []uint32 {
	return p.Rec
}

func (p *MTGP32dc_params_array_ptr) SetPositionArray(arr []int) {
	p.Pos = arr
}

func (p *MTGP32dc_params_array_ptr) GetPositionArray() []int {
	return p.Pos
}

func (p *MTGP32dc_params_array_ptr) SetSH1Array(arr []int) {
	p.Sh1 = arr
}

func (p *MTGP32dc_params_array_ptr) GetSH1Array() []int {
	return p.Sh1
}

func (p *MTGP32dc_params_array_ptr) SetSH2Array(arr []int) {
	p.Sh2 = arr
}

func (p *MTGP32dc_params_array_ptr) GetSH2Array() []int {
	return p.Sh2
}

func (p *MTGP32dc_params_array_ptr) SetStatusArray(arr []uint32) {
	p.Status = arr
}

func (p *MTGP32dc_params_array_ptr) GetStatusArray() []uint32 {
	return p.Status
}

func (p *MTGP32dc_params_array_ptr) SetGroupSize(in int) {
        p.GroupSize = in
}

func (p *MTGP32dc_params_array_ptr) GetGroupSize() int {
        return p.GroupSize
}

func (p *MTGP32dc_params_array_ptr) SetGroupCount(in int) {
        p.GroupCount = in
}

func (p *MTGP32dc_params_array_ptr) GetGroupSizeCount() int {
        return p.GroupCount
}
