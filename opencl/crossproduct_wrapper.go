package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for crossproduct kernel invocation
type crossproduct_args_t struct {
	arg_dstx unsafe.Pointer
	arg_dsty unsafe.Pointer
	arg_dstz unsafe.Pointer
	arg_ax   unsafe.Pointer
	arg_ay   unsafe.Pointer
	arg_az   unsafe.Pointer
	arg_bx   unsafe.Pointer
	arg_by   unsafe.Pointer
	arg_bz   unsafe.Pointer
	arg_N    int
	argptr   [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for crossproduct kernel invocation
var crossproduct_args crossproduct_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	crossproduct_args.argptr[0] = unsafe.Pointer(&crossproduct_args.arg_dstx)
	crossproduct_args.argptr[1] = unsafe.Pointer(&crossproduct_args.arg_dsty)
	crossproduct_args.argptr[2] = unsafe.Pointer(&crossproduct_args.arg_dstz)
	crossproduct_args.argptr[3] = unsafe.Pointer(&crossproduct_args.arg_ax)
	crossproduct_args.argptr[4] = unsafe.Pointer(&crossproduct_args.arg_ay)
	crossproduct_args.argptr[5] = unsafe.Pointer(&crossproduct_args.arg_az)
	crossproduct_args.argptr[6] = unsafe.Pointer(&crossproduct_args.arg_bx)
	crossproduct_args.argptr[7] = unsafe.Pointer(&crossproduct_args.arg_by)
	crossproduct_args.argptr[8] = unsafe.Pointer(&crossproduct_args.arg_bz)
	crossproduct_args.argptr[9] = unsafe.Pointer(&crossproduct_args.arg_N)
}

// Wrapper for crossproduct OpenCL kernel, asynchronous.
func k_crossproduct_async(dstx unsafe.Pointer, dsty unsafe.Pointer, dstz unsafe.Pointer, ax unsafe.Pointer, ay unsafe.Pointer, az unsafe.Pointer, bx unsafe.Pointer, by unsafe.Pointer, bz unsafe.Pointer, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("crossproduct")
	}

	crossproduct_args.Lock()
	defer crossproduct_args.Unlock()

	crossproduct_args.arg_dstx = dstx
	crossproduct_args.arg_dsty = dsty
	crossproduct_args.arg_dstz = dstz
	crossproduct_args.arg_ax = ax
	crossproduct_args.arg_ay = ay
	crossproduct_args.arg_az = az
	crossproduct_args.arg_bx = bx
	crossproduct_args.arg_by = by
	crossproduct_args.arg_bz = bz
	crossproduct_args.arg_N = N

	SetKernelArgWrapper("crossproduct", 0, dstx)
	SetKernelArgWrapper("crossproduct", 1, dsty)
	SetKernelArgWrapper("crossproduct", 2, dstz)
	SetKernelArgWrapper("crossproduct", 3, ax)
	SetKernelArgWrapper("crossproduct", 4, ay)
	SetKernelArgWrapper("crossproduct", 5, az)
	SetKernelArgWrapper("crossproduct", 6, bx)
	SetKernelArgWrapper("crossproduct", 7, by)
	SetKernelArgWrapper("crossproduct", 8, bz)
	SetKernelArgWrapper("crossproduct", 9, N)

	//	args := crossproduct_args.argptr[:]
	event := LaunchKernel("crossproduct", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("crossproduct")
	}

	return event
}
