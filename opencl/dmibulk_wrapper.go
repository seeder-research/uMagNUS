package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for adddmibulk kernel invocation
type adddmibulk_args_t struct {
	arg_Hx      unsafe.Pointer
	arg_Hy      unsafe.Pointer
	arg_Hz      unsafe.Pointer
	arg_mx      unsafe.Pointer
	arg_my      unsafe.Pointer
	arg_mz      unsafe.Pointer
	arg_Ms_     unsafe.Pointer
	arg_Ms_mul  float32
	arg_aLUT2d  unsafe.Pointer
	arg_DLUT2d  unsafe.Pointer
	arg_regions unsafe.Pointer
	arg_cx      float32
	arg_cy      float32
	arg_cz      float32
	arg_Nx      int
	arg_Ny      int
	arg_Nz      int
	arg_PBC     uint8
	arg_OpenBC  uint8
	argptr      [19]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for adddmibulk kernel invocation
var adddmibulk_args adddmibulk_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	adddmibulk_args.argptr[0] = unsafe.Pointer(&adddmibulk_args.arg_Hx)
	adddmibulk_args.argptr[1] = unsafe.Pointer(&adddmibulk_args.arg_Hy)
	adddmibulk_args.argptr[2] = unsafe.Pointer(&adddmibulk_args.arg_Hz)
	adddmibulk_args.argptr[3] = unsafe.Pointer(&adddmibulk_args.arg_mx)
	adddmibulk_args.argptr[4] = unsafe.Pointer(&adddmibulk_args.arg_my)
	adddmibulk_args.argptr[5] = unsafe.Pointer(&adddmibulk_args.arg_mz)
	adddmibulk_args.argptr[6] = unsafe.Pointer(&adddmibulk_args.arg_Ms_)
	adddmibulk_args.argptr[7] = unsafe.Pointer(&adddmibulk_args.arg_Ms_mul)
	adddmibulk_args.argptr[8] = unsafe.Pointer(&adddmibulk_args.arg_aLUT2d)
	adddmibulk_args.argptr[9] = unsafe.Pointer(&adddmibulk_args.arg_DLUT2d)
	adddmibulk_args.argptr[10] = unsafe.Pointer(&adddmibulk_args.arg_regions)
	adddmibulk_args.argptr[11] = unsafe.Pointer(&adddmibulk_args.arg_cx)
	adddmibulk_args.argptr[12] = unsafe.Pointer(&adddmibulk_args.arg_cy)
	adddmibulk_args.argptr[13] = unsafe.Pointer(&adddmibulk_args.arg_cz)
	adddmibulk_args.argptr[14] = unsafe.Pointer(&adddmibulk_args.arg_Nx)
	adddmibulk_args.argptr[15] = unsafe.Pointer(&adddmibulk_args.arg_Ny)
	adddmibulk_args.argptr[16] = unsafe.Pointer(&adddmibulk_args.arg_Nz)
	adddmibulk_args.argptr[17] = unsafe.Pointer(&adddmibulk_args.arg_PBC)
	adddmibulk_args.argptr[18] = unsafe.Pointer(&adddmibulk_args.arg_OpenBC)
}

// Wrapper for adddmibulk OpenCL kernel, asynchronous.
func k_adddmibulk_async(Hx unsafe.Pointer, Hy unsafe.Pointer, Hz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Ms_ unsafe.Pointer, Ms_mul float32, aLUT2d unsafe.Pointer, DLUT2d unsafe.Pointer, regions unsafe.Pointer, cx float32, cy float32, cz float32, Nx int, Ny int, Nz int, PBC uint8, OpenBC uint8, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("adddmibulk")
	}

	adddmibulk_args.Lock()
	defer adddmibulk_args.Unlock()

	adddmibulk_args.arg_Hx = Hx
	adddmibulk_args.arg_Hy = Hy
	adddmibulk_args.arg_Hz = Hz
	adddmibulk_args.arg_mx = mx
	adddmibulk_args.arg_my = my
	adddmibulk_args.arg_mz = mz
	adddmibulk_args.arg_Ms_ = Ms_
	adddmibulk_args.arg_Ms_mul = Ms_mul
	adddmibulk_args.arg_aLUT2d = aLUT2d
	adddmibulk_args.arg_DLUT2d = DLUT2d
	adddmibulk_args.arg_regions = regions
	adddmibulk_args.arg_cx = cx
	adddmibulk_args.arg_cy = cy
	adddmibulk_args.arg_cz = cz
	adddmibulk_args.arg_Nx = Nx
	adddmibulk_args.arg_Ny = Ny
	adddmibulk_args.arg_Nz = Nz
	adddmibulk_args.arg_PBC = PBC
	adddmibulk_args.arg_OpenBC = OpenBC

	SetKernelArgWrapper("adddmibulk", 0, Hx)
	SetKernelArgWrapper("adddmibulk", 1, Hy)
	SetKernelArgWrapper("adddmibulk", 2, Hz)
	SetKernelArgWrapper("adddmibulk", 3, mx)
	SetKernelArgWrapper("adddmibulk", 4, my)
	SetKernelArgWrapper("adddmibulk", 5, mz)
	SetKernelArgWrapper("adddmibulk", 6, Ms_)
	SetKernelArgWrapper("adddmibulk", 7, Ms_mul)
	SetKernelArgWrapper("adddmibulk", 8, aLUT2d)
	SetKernelArgWrapper("adddmibulk", 9, DLUT2d)
	SetKernelArgWrapper("adddmibulk", 10, regions)
	SetKernelArgWrapper("adddmibulk", 11, cx)
	SetKernelArgWrapper("adddmibulk", 12, cy)
	SetKernelArgWrapper("adddmibulk", 13, cz)
	SetKernelArgWrapper("adddmibulk", 14, Nx)
	SetKernelArgWrapper("adddmibulk", 15, Ny)
	SetKernelArgWrapper("adddmibulk", 16, Nz)
	SetKernelArgWrapper("adddmibulk", 17, PBC)
	SetKernelArgWrapper("adddmibulk", 18, OpenBC)

	//	args := adddmibulk_args.argptr[:]
	event := LaunchKernel("adddmibulk", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("adddmibulk")
	}

	return event
}
