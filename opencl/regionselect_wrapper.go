package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for regionselect kernel invocation
type regionselect_args_t struct {
	arg_dst     unsafe.Pointer
	arg_src     unsafe.Pointer
	arg_regions unsafe.Pointer
	arg_region  uint8
	arg_N       int
	argptr      [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for regionselect kernel invocation
var regionselect_args regionselect_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	regionselect_args.argptr[0] = unsafe.Pointer(&regionselect_args.arg_dst)
	regionselect_args.argptr[1] = unsafe.Pointer(&regionselect_args.arg_src)
	regionselect_args.argptr[2] = unsafe.Pointer(&regionselect_args.arg_regions)
	regionselect_args.argptr[3] = unsafe.Pointer(&regionselect_args.arg_region)
	regionselect_args.argptr[4] = unsafe.Pointer(&regionselect_args.arg_N)
}

// Wrapper for regionselect OpenCL kernel, asynchronous.
func k_regionselect_async(dst unsafe.Pointer, src unsafe.Pointer, regions unsafe.Pointer, region uint8, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("regionselect")
	}

	regionselect_args.Lock()
	defer regionselect_args.Unlock()

	regionselect_args.arg_dst = dst
	regionselect_args.arg_src = src
	regionselect_args.arg_regions = regions
	regionselect_args.arg_region = region
	regionselect_args.arg_N = N

	SetKernelArgWrapper("regionselect", 0, dst)
	SetKernelArgWrapper("regionselect", 1, src)
	SetKernelArgWrapper("regionselect", 2, regions)
	SetKernelArgWrapper("regionselect", 3, region)
	SetKernelArgWrapper("regionselect", 4, N)

	//	args := regionselect_args.argptr[:]
	event := LaunchKernel("regionselect", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("regionselect")
	}

	return event
}
