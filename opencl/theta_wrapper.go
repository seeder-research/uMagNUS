package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for setTheta kernel invocation
type setTheta_args_t struct {
	arg_theta unsafe.Pointer
	arg_mz    unsafe.Pointer
	arg_Nx    int
	arg_Ny    int
	arg_Nz    int
	argptr    [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for setTheta kernel invocation
var setTheta_args setTheta_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	setTheta_args.argptr[0] = unsafe.Pointer(&setTheta_args.arg_theta)
	setTheta_args.argptr[1] = unsafe.Pointer(&setTheta_args.arg_mz)
	setTheta_args.argptr[2] = unsafe.Pointer(&setTheta_args.arg_Nx)
	setTheta_args.argptr[3] = unsafe.Pointer(&setTheta_args.arg_Ny)
	setTheta_args.argptr[4] = unsafe.Pointer(&setTheta_args.arg_Nz)
}

// Wrapper for setTheta OpenCL kernel, asynchronous.
func k_setTheta_async(theta unsafe.Pointer, mz unsafe.Pointer, Nx int, Ny int, Nz int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("setTheta")
	}

	setTheta_args.Lock()
	defer setTheta_args.Unlock()

	setTheta_args.arg_theta = theta
	setTheta_args.arg_mz = mz
	setTheta_args.arg_Nx = Nx
	setTheta_args.arg_Ny = Ny
	setTheta_args.arg_Nz = Nz

	SetKernelArgWrapper("setTheta", 0, theta)
	SetKernelArgWrapper("setTheta", 1, mz)
	SetKernelArgWrapper("setTheta", 2, Nx)
	SetKernelArgWrapper("setTheta", 3, Ny)
	SetKernelArgWrapper("setTheta", 4, Nz)

	//	args := setTheta_args.argptr[:]
	event := LaunchKernel("setTheta", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("setTheta")
	}

	return event
}
