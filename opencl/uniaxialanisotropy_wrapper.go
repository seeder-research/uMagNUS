package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for adduniaxialanisotropy kernel invocation
type adduniaxialanisotropy_args_t struct {
	arg_Bx     unsafe.Pointer
	arg_By     unsafe.Pointer
	arg_Bz     unsafe.Pointer
	arg_mx     unsafe.Pointer
	arg_my     unsafe.Pointer
	arg_mz     unsafe.Pointer
	arg_Ms_    unsafe.Pointer
	arg_Ms_mul float32
	arg_K1_    unsafe.Pointer
	arg_K1_mul float32
	arg_ux_    unsafe.Pointer
	arg_ux_mul float32
	arg_uy_    unsafe.Pointer
	arg_uy_mul float32
	arg_uz_    unsafe.Pointer
	arg_uz_mul float32
	arg_N      int
	argptr     [17]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for adduniaxialanisotropy kernel invocation
var adduniaxialanisotropy_args adduniaxialanisotropy_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	adduniaxialanisotropy_args.argptr[0] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_Bx)
	adduniaxialanisotropy_args.argptr[1] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_By)
	adduniaxialanisotropy_args.argptr[2] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_Bz)
	adduniaxialanisotropy_args.argptr[3] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_mx)
	adduniaxialanisotropy_args.argptr[4] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_my)
	adduniaxialanisotropy_args.argptr[5] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_mz)
	adduniaxialanisotropy_args.argptr[6] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_Ms_)
	adduniaxialanisotropy_args.argptr[7] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_Ms_mul)
	adduniaxialanisotropy_args.argptr[8] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_K1_)
	adduniaxialanisotropy_args.argptr[9] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_K1_mul)
	adduniaxialanisotropy_args.argptr[10] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_ux_)
	adduniaxialanisotropy_args.argptr[11] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_ux_mul)
	adduniaxialanisotropy_args.argptr[12] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_uy_)
	adduniaxialanisotropy_args.argptr[13] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_uy_mul)
	adduniaxialanisotropy_args.argptr[14] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_uz_)
	adduniaxialanisotropy_args.argptr[15] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_uz_mul)
	adduniaxialanisotropy_args.argptr[16] = unsafe.Pointer(&adduniaxialanisotropy_args.arg_N)
}

// Wrapper for adduniaxialanisotropy OpenCL kernel, asynchronous.
func k_adduniaxialanisotropy_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Ms_ unsafe.Pointer, Ms_mul float32, K1_ unsafe.Pointer, K1_mul float32, ux_ unsafe.Pointer, ux_mul float32, uy_ unsafe.Pointer, uy_mul float32, uz_ unsafe.Pointer, uz_mul float32, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("adduniaxialanisotropy")
	}

	adduniaxialanisotropy_args.Lock()
	defer adduniaxialanisotropy_args.Unlock()

	adduniaxialanisotropy_args.arg_Bx = Bx
	adduniaxialanisotropy_args.arg_By = By
	adduniaxialanisotropy_args.arg_Bz = Bz
	adduniaxialanisotropy_args.arg_mx = mx
	adduniaxialanisotropy_args.arg_my = my
	adduniaxialanisotropy_args.arg_mz = mz
	adduniaxialanisotropy_args.arg_Ms_ = Ms_
	adduniaxialanisotropy_args.arg_Ms_mul = Ms_mul
	adduniaxialanisotropy_args.arg_K1_ = K1_
	adduniaxialanisotropy_args.arg_K1_mul = K1_mul
	adduniaxialanisotropy_args.arg_ux_ = ux_
	adduniaxialanisotropy_args.arg_ux_mul = ux_mul
	adduniaxialanisotropy_args.arg_uy_ = uy_
	adduniaxialanisotropy_args.arg_uy_mul = uy_mul
	adduniaxialanisotropy_args.arg_uz_ = uz_
	adduniaxialanisotropy_args.arg_uz_mul = uz_mul
	adduniaxialanisotropy_args.arg_N = N

	SetKernelArgWrapper("adduniaxialanisotropy", 0, Bx)
	SetKernelArgWrapper("adduniaxialanisotropy", 1, By)
	SetKernelArgWrapper("adduniaxialanisotropy", 2, Bz)
	SetKernelArgWrapper("adduniaxialanisotropy", 3, mx)
	SetKernelArgWrapper("adduniaxialanisotropy", 4, my)
	SetKernelArgWrapper("adduniaxialanisotropy", 5, mz)
	SetKernelArgWrapper("adduniaxialanisotropy", 6, Ms_)
	SetKernelArgWrapper("adduniaxialanisotropy", 7, Ms_mul)
	SetKernelArgWrapper("adduniaxialanisotropy", 8, K1_)
	SetKernelArgWrapper("adduniaxialanisotropy", 9, K1_mul)
	SetKernelArgWrapper("adduniaxialanisotropy", 10, ux_)
	SetKernelArgWrapper("adduniaxialanisotropy", 11, ux_mul)
	SetKernelArgWrapper("adduniaxialanisotropy", 12, uy_)
	SetKernelArgWrapper("adduniaxialanisotropy", 13, uy_mul)
	SetKernelArgWrapper("adduniaxialanisotropy", 14, uz_)
	SetKernelArgWrapper("adduniaxialanisotropy", 15, uz_mul)
	SetKernelArgWrapper("adduniaxialanisotropy", 16, N)

	//	args := adduniaxialanisotropy_args.argptr[:]
	event := LaunchKernel("adduniaxialanisotropy", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("adduniaxialanisotropy")
	}

	return event
}
