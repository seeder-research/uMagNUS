package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for reducedot kernel invocation
type reducedot_args_t struct {
	arg_src1    unsafe.Pointer
	arg_src2    unsafe.Pointer
	arg_dst     unsafe.Pointer
	arg_initVal float32
	arg_fac     int
	arg_group_n int
	arg_n       int
	argptr      [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for reducedot kernel invocation
var reducedot_args reducedot_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	reducedot_args.argptr[0] = unsafe.Pointer(&reducedot_args.arg_src1)
	reducedot_args.argptr[1] = unsafe.Pointer(&reducedot_args.arg_src2)
	reducedot_args.argptr[2] = unsafe.Pointer(&reducedot_args.arg_dst)
	reducedot_args.argptr[3] = unsafe.Pointer(&reducedot_args.arg_initVal)
	reducedot_args.argptr[4] = unsafe.Pointer(&reducedot_args.arg_fac)
	reducedot_args.argptr[5] = unsafe.Pointer(&reducedot_args.arg_group_n)
	reducedot_args.argptr[6] = unsafe.Pointer(&reducedot_args.arg_n)
}

// Wrapper for reducedot OpenCL kernel, asynchronous.
func k_reducedot_async(src1 unsafe.Pointer, src2 unsafe.Pointer, dst unsafe.Pointer, initVal float32, fac int, group_n int, n int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("reducedot")
	}

	reducedot_args.Lock()
	defer reducedot_args.Unlock()

	reducedot_args.arg_src1 = src1
	reducedot_args.arg_src2 = src2
	reducedot_args.arg_dst = dst
	reducedot_args.arg_initVal = initVal
	reducedot_args.arg_fac = fac
	reducedot_args.arg_group_n = group_n
	reducedot_args.arg_n = n

	SetKernelArgWrapper("reducedot", 0, src1)
	SetKernelArgWrapper("reducedot", 1, src2)
	SetKernelArgWrapper("reducedot", 2, dst)
	SetKernelArgWrapper("reducedot", 3, initVal)
	SetKernelArgWrapper("reducedot", 4, fac)
	SetKernelArgWrapper("reducedot", 5, group_n)
	SetKernelArgWrapper("reducedot", 6, n)
	KernList["reducedot"].SetArgUnsafe(7, cfg.Block[0]*cfg.Block[1]*cfg.Block[2]*SIZEOF_FLOAT32, nil)

	//	args := reducedot_args.argptr[:]
	event := LaunchKernel("reducedot", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("reducedot")
	}

	return event
}
