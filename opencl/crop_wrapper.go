package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for crop kernel invocation
type crop_args_t struct {
	arg_dst  unsafe.Pointer
	arg_Dx   int
	arg_Dy   int
	arg_Dz   int
	arg_src  unsafe.Pointer
	arg_Sx   int
	arg_Sy   int
	arg_Sz   int
	arg_Offx int
	arg_Offy int
	arg_Offz int
	argptr   [11]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for crop kernel invocation
var crop_args crop_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	crop_args.argptr[0] = unsafe.Pointer(&crop_args.arg_dst)
	crop_args.argptr[1] = unsafe.Pointer(&crop_args.arg_Dx)
	crop_args.argptr[2] = unsafe.Pointer(&crop_args.arg_Dy)
	crop_args.argptr[3] = unsafe.Pointer(&crop_args.arg_Dz)
	crop_args.argptr[4] = unsafe.Pointer(&crop_args.arg_src)
	crop_args.argptr[5] = unsafe.Pointer(&crop_args.arg_Sx)
	crop_args.argptr[6] = unsafe.Pointer(&crop_args.arg_Sy)
	crop_args.argptr[7] = unsafe.Pointer(&crop_args.arg_Sz)
	crop_args.argptr[8] = unsafe.Pointer(&crop_args.arg_Offx)
	crop_args.argptr[9] = unsafe.Pointer(&crop_args.arg_Offy)
	crop_args.argptr[10] = unsafe.Pointer(&crop_args.arg_Offz)
}

// Wrapper for crop OpenCL kernel, asynchronous.
func k_crop_async(dst unsafe.Pointer, Dx int, Dy int, Dz int, src unsafe.Pointer, Sx int, Sy int, Sz int, Offx int, Offy int, Offz int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("crop")
	}

	crop_args.Lock()
	defer crop_args.Unlock()

	crop_args.arg_dst = dst
	crop_args.arg_Dx = Dx
	crop_args.arg_Dy = Dy
	crop_args.arg_Dz = Dz
	crop_args.arg_src = src
	crop_args.arg_Sx = Sx
	crop_args.arg_Sy = Sy
	crop_args.arg_Sz = Sz
	crop_args.arg_Offx = Offx
	crop_args.arg_Offy = Offy
	crop_args.arg_Offz = Offz

	SetKernelArgWrapper("crop", 0, dst)
	SetKernelArgWrapper("crop", 1, Dx)
	SetKernelArgWrapper("crop", 2, Dy)
	SetKernelArgWrapper("crop", 3, Dz)
	SetKernelArgWrapper("crop", 4, src)
	SetKernelArgWrapper("crop", 5, Sx)
	SetKernelArgWrapper("crop", 6, Sy)
	SetKernelArgWrapper("crop", 7, Sz)
	SetKernelArgWrapper("crop", 8, Offx)
	SetKernelArgWrapper("crop", 9, Offy)
	SetKernelArgWrapper("crop", 10, Offz)

	//	args := crop_args.argptr[:]
	event := LaunchKernel("crop", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("crop")
	}

	return event
}
