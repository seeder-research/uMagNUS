package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for settemperature2 kernel invocation
type settemperature2_args_t struct {
	arg_B            unsafe.Pointer
	arg_noise        unsafe.Pointer
	arg_kB2_VgammaDt float32
	arg_Ms_          unsafe.Pointer
	arg_Ms_mul       float32
	arg_temp_        unsafe.Pointer
	arg_temp_mul     float32
	arg_alpha_       unsafe.Pointer
	arg_alpha_mul    float32
	arg_N            int
	argptr           [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for settemperature2 kernel invocation
var settemperature2_args settemperature2_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	settemperature2_args.argptr[0] = unsafe.Pointer(&settemperature2_args.arg_B)
	settemperature2_args.argptr[1] = unsafe.Pointer(&settemperature2_args.arg_noise)
	settemperature2_args.argptr[2] = unsafe.Pointer(&settemperature2_args.arg_kB2_VgammaDt)
	settemperature2_args.argptr[3] = unsafe.Pointer(&settemperature2_args.arg_Ms_)
	settemperature2_args.argptr[4] = unsafe.Pointer(&settemperature2_args.arg_Ms_mul)
	settemperature2_args.argptr[5] = unsafe.Pointer(&settemperature2_args.arg_temp_)
	settemperature2_args.argptr[6] = unsafe.Pointer(&settemperature2_args.arg_temp_mul)
	settemperature2_args.argptr[7] = unsafe.Pointer(&settemperature2_args.arg_alpha_)
	settemperature2_args.argptr[8] = unsafe.Pointer(&settemperature2_args.arg_alpha_mul)
	settemperature2_args.argptr[9] = unsafe.Pointer(&settemperature2_args.arg_N)
}

// Wrapper for settemperature2 OpenCL kernel, asynchronous.
func k_settemperature2_async(B unsafe.Pointer, noise unsafe.Pointer, kB2_VgammaDt float32, Ms_ unsafe.Pointer, Ms_mul float32, temp_ unsafe.Pointer, temp_mul float32, alpha_ unsafe.Pointer, alpha_mul float32, N int, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("settemperature2")
	}

	settemperature2_args.Lock()
	defer settemperature2_args.Unlock()

	settemperature2_args.arg_B = B
	settemperature2_args.arg_noise = noise
	settemperature2_args.arg_kB2_VgammaDt = kB2_VgammaDt
	settemperature2_args.arg_Ms_ = Ms_
	settemperature2_args.arg_Ms_mul = Ms_mul
	settemperature2_args.arg_temp_ = temp_
	settemperature2_args.arg_temp_mul = temp_mul
	settemperature2_args.arg_alpha_ = alpha_
	settemperature2_args.arg_alpha_mul = alpha_mul
	settemperature2_args.arg_N = N

	SetKernelArgWrapper("settemperature2", 0, B)
	SetKernelArgWrapper("settemperature2", 1, noise)
	SetKernelArgWrapper("settemperature2", 2, kB2_VgammaDt)
	SetKernelArgWrapper("settemperature2", 3, Ms_)
	SetKernelArgWrapper("settemperature2", 4, Ms_mul)
	SetKernelArgWrapper("settemperature2", 5, temp_)
	SetKernelArgWrapper("settemperature2", 6, temp_mul)
	SetKernelArgWrapper("settemperature2", 7, alpha_)
	SetKernelArgWrapper("settemperature2", 8, alpha_mul)
	SetKernelArgWrapper("settemperature2", 9, N)

	//	args := settemperature2_args.argptr[:]
	event := LaunchKernel("settemperature2", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("settemperature2")
	}

	return event
}
