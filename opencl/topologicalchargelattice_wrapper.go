package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/seeder-research/uMagNUS/cl"
	"github.com/seeder-research/uMagNUS/timer"
	"sync"
	"unsafe"
)

// Stores the arguments for settopologicalchargelattice kernel invocation
type settopologicalchargelattice_args_t struct {
	arg_s     unsafe.Pointer
	arg_mx    unsafe.Pointer
	arg_my    unsafe.Pointer
	arg_mz    unsafe.Pointer
	arg_icxcy float32
	arg_Nx    int
	arg_Ny    int
	arg_Nz    int
	arg_PBC   uint8
	argptr    [9]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for settopologicalchargelattice kernel invocation
var settopologicalchargelattice_args settopologicalchargelattice_args_t

func init() {
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	settopologicalchargelattice_args.argptr[0] = unsafe.Pointer(&settopologicalchargelattice_args.arg_s)
	settopologicalchargelattice_args.argptr[1] = unsafe.Pointer(&settopologicalchargelattice_args.arg_mx)
	settopologicalchargelattice_args.argptr[2] = unsafe.Pointer(&settopologicalchargelattice_args.arg_my)
	settopologicalchargelattice_args.argptr[3] = unsafe.Pointer(&settopologicalchargelattice_args.arg_mz)
	settopologicalchargelattice_args.argptr[4] = unsafe.Pointer(&settopologicalchargelattice_args.arg_icxcy)
	settopologicalchargelattice_args.argptr[5] = unsafe.Pointer(&settopologicalchargelattice_args.arg_Nx)
	settopologicalchargelattice_args.argptr[6] = unsafe.Pointer(&settopologicalchargelattice_args.arg_Ny)
	settopologicalchargelattice_args.argptr[7] = unsafe.Pointer(&settopologicalchargelattice_args.arg_Nz)
	settopologicalchargelattice_args.argptr[8] = unsafe.Pointer(&settopologicalchargelattice_args.arg_PBC)
}

// Wrapper for settopologicalchargelattice OpenCL kernel, asynchronous.
func k_settopologicalchargelattice_async(s unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, icxcy float32, Nx int, Ny int, Nz int, PBC uint8, cfg *config, events []*cl.Event, launchQueue *cl.CommandQueue) *cl.Event {
	if Synchronous { // debug
		launchQueue.Finish()
		timer.Start("settopologicalchargelattice")
	}

	settopologicalchargelattice_args.Lock()
	defer settopologicalchargelattice_args.Unlock()

	settopologicalchargelattice_args.arg_s = s
	settopologicalchargelattice_args.arg_mx = mx
	settopologicalchargelattice_args.arg_my = my
	settopologicalchargelattice_args.arg_mz = mz
	settopologicalchargelattice_args.arg_icxcy = icxcy
	settopologicalchargelattice_args.arg_Nx = Nx
	settopologicalchargelattice_args.arg_Ny = Ny
	settopologicalchargelattice_args.arg_Nz = Nz
	settopologicalchargelattice_args.arg_PBC = PBC

	SetKernelArgWrapper("settopologicalchargelattice", 0, s)
	SetKernelArgWrapper("settopologicalchargelattice", 1, mx)
	SetKernelArgWrapper("settopologicalchargelattice", 2, my)
	SetKernelArgWrapper("settopologicalchargelattice", 3, mz)
	SetKernelArgWrapper("settopologicalchargelattice", 4, icxcy)
	SetKernelArgWrapper("settopologicalchargelattice", 5, Nx)
	SetKernelArgWrapper("settopologicalchargelattice", 6, Ny)
	SetKernelArgWrapper("settopologicalchargelattice", 7, Nz)
	SetKernelArgWrapper("settopologicalchargelattice", 8, PBC)

	//	args := settopologicalchargelattice_args.argptr[:]
	event := LaunchKernel("settopologicalchargelattice", cfg.Grid, cfg.Block, launchQueue, events)

	if Synchronous { // debug
		launchQueue.Finish()
		timer.Stop("settopologicalchargelattice")
	}

	return event
}
