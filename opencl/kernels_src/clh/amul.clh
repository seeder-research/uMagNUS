#ifndef _AMUL_H_
#define _AMUL_H_

// Returns mul * arr[i], or mul when arr == NULL;
inline float amul(__global float *arr, float mul, int i) {
	return (arr == NULL)? (mul) : (mul * arr[i]);
}

// Returns m * a[i], or m when a == NULL;
inline float3 vmul(__global float *ax, __global float *ay, __global float *az,
							 float mx,           float my,           float mz, int i) {
	return make_float3(amul(ax, mx, i),
					   amul(ay, my, i),
					   amul(az, mz, i));
}

// Returns 1/Msat, or 0 when Msat == 0.
inline float inv_Msat(__global float* Ms_, float Ms_mul, int i) {
	float ms = amul(Ms_, Ms_mul, i);
    if (ms == 0.0f) {
        return 0.0f;
    } else {
        return 1.0f / ms;
    }
}
#endif
